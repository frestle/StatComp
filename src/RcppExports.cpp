// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sirscore
arma::vec sirscore(arma::mat A, arma::vec y, double a, arma::vec x0, int maxsize, double delta, double thresh, int maxiter, double tol);
RcppExport SEXP _StatComp22010_sirscore(SEXP ASEXP, SEXP ySEXP, SEXP aSEXP, SEXP x0SEXP, SEXP maxsizeSEXP, SEXP deltaSEXP, SEXP threshSEXP, SEXP maxiterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< int >::type maxsize(maxsizeSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(sirscore(A, y, a, x0, maxsize, delta, thresh, maxiter, tol));
    return rcpp_result_gen;
END_RCPP
}
// sirs
arma::vec sirs(arma::mat A, arma::vec y, arma::vec x0, int maxsize, double eps, double a, double delta, double thresh, int maxiter, int maxseq, double tol);
RcppExport SEXP _StatComp22010_sirs(SEXP ASEXP, SEXP ySEXP, SEXP x0SEXP, SEXP maxsizeSEXP, SEXP epsSEXP, SEXP aSEXP, SEXP deltaSEXP, SEXP threshSEXP, SEXP maxiterSEXP, SEXP maxseqSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< int >::type maxsize(maxsizeSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type maxseq(maxseqSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(sirs(A, y, x0, maxsize, eps, a, delta, thresh, maxiter, maxseq, tol));
    return rcpp_result_gen;
END_RCPP
}
// Gibbs_binorm
NumericMatrix Gibbs_binorm(int N, double sigma1, double sigma2, double mu1, double mu2, double rho, double s1, double s2, NumericMatrix X);
RcppExport SEXP _StatComp22010_Gibbs_binorm(SEXP NSEXP, SEXP sigma1SEXP, SEXP sigma2SEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP rhoSEXP, SEXP s1SEXP, SEXP s2SEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(Gibbs_binorm(N, sigma1, sigma2, mu1, mu2, rho, s1, s2, X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_StatComp22010_sirscore", (DL_FUNC) &_StatComp22010_sirscore, 9},
    {"_StatComp22010_sirs", (DL_FUNC) &_StatComp22010_sirs, 11},
    {"_StatComp22010_Gibbs_binorm", (DL_FUNC) &_StatComp22010_Gibbs_binorm, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_StatComp22010(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
